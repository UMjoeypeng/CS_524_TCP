omod TCP is
    including MESSAGE-WRAPPER . --- msg wrapper and loss
    protecting RANDOM + STRING + NAT + BOOL + BOOL-LIST + STRING-LIST .
    sort Content . --- message content without sequence numbers
    subsort String < Content . --- "messages" are just strings
    subsort String < Oid .
    sort OConfig .
    subsort Object < OConfig < Configuration .
    op __ : OConfig OConfig -> OConfig [ctor config assoc comm id: none] .
    --- op __ : OConfig Msg -> Configuration [ctor config assoc comm id: none] .
    op ack : -> Content [ctor] . --- acknowledgment message
    --- sequence number wrapper:
    op _withSeqNo_ : Content Nat -> MsgContent [ctor] .
    

    sort NatTime .
    subsort Nat < NatTime .
    sort Time_Configuration .
    var OC : OConfig .
    var NT : NatTime .
    
    op { _ | _ } : Configuration NatTime -> Time_Configuration [ctor] .


    op next : -> Msg [ctor] .

    sort MsgList .
    subsort Msg < MsgList .
    op Mnil : -> MsgList [ctor] .
    op _++_ : MsgList MsgList -> MsgList [ctor assoc id: Mnil] .
    op head : MsgList -> Msg .
    op tail : MsgList -> MsgList .
    op _[_] : MsgList Int -> Msg .
    op size : MsgList -> Nat .
    op pop(_,_) : MsgList Int -> MsgList .
    op reverse : MsgList -> MsgList .
    op unackPacket(_,_) : MsgList BoolList -> MsgList .

    vars N N' N0 N1 N2 : Nat . 
    vars I I0 I1 : Int .
    var NZ : NzNat . 
    vars O O' O2 : Oid .
    vars S S0 S1 : String . 
    vars SL SL' SL0 : StringList .
    vars B B0 B1 : Bool .
    vars BList BL BL0 : BoolList . 
    vars Ack Ack0 Ack1 : Bool . 
    var AckL : BoolList .
    vars M M0 M1 : Msg .
    vars ML ML0 : MsgList .
    var H : Msg .
    var T : MsgList .
    var R : OConfig .


    eq head(H ++ T) = H .
    eq tail(H ++ T) = T .
    eq tail(Mnil) = Mnil .
    eq head(Mnil) = Mnil .
    eq T [ N ] = if N <= 0 then if N == 0 then head(T) else Mnil fi else tail(T) [ N - 1 ] fi .
    eq size(T) = if T == Mnil then 0 else 1 + size(tail(T)) fi .

    eq pop(T , N) = if N == 0 then tail(T) else head(T) ++ (pop(tail(T), N - 1)) fi .

    eq unackPacket(ML , AckL) = if ML == Mnil then Mnil else (if head(AckL) then unackPacket(tail(ML),tail(AckL)) else head(ML) ++ unackPacket(tail(ML),tail(AckL)) fi) fi .
    eq reverse(ML) = if ML == Mnil then Mnil else reverse(tail(ML)) ++ head(ML) fi .
    
    class Channel | msgs : MsgList,
                    count : Nat .
                    --- nextMsg : Msg .

        crl [msg-loss] : < O : Channel | msgs :  ML , count : N >  => < O : Channel | msgs : pop( ML , random(N) rem (size(ML)) ) , count : N + 1 > if size(ML) > 0 and (random(N) rem 5 == 0) .
        
        crl [convey-msg] : < O : Channel | msgs :  ML , count : N >   => < O : Channel | msgs : pop( ML , random(N) rem (size(ML)) ) , count : N + 1 > ((ML) [ random(N) rem (size(ML)) ]) if size(ML) > 0 and not (random(N) rem 5 == 0) .
        
    
    class Sender | msgsToSend : StringList, 
                sendBuffer : MsgList, 
                currentSeqNo : Nat, 
                receiver : Oid, 
                ackBuffer : BoolList, 
                numWordsInBuffer : Nat, 
                sendLast : Bool,
                finishSend : Bool, 
                channel : Oid, 
                bufferSize : Nat, 
                bufferStart : Int ,
                lastSendMsgs : MsgList .


        rl [start] :
            < O : Sender | currentSeqNo : 0 , bufferSize : N >
            =>  
            < O : Sender | ackBuffer : n_true(N) , finishSend : false , bufferStart : 1 - N > .

        crl [load_word] : 
            < O : Sender | msgsToSend : S SL, sendBuffer : ML , numWordsInBuffer : N , currentSeqNo : N' , ackBuffer : AckL , finishSend : B , receiver : O', bufferSize : N0, bufferStart : I > 
            => 
            < O : Sender | msgsToSend : SL, sendBuffer : (msg (S withSeqNo s N') from O to O') ++ ML, numWordsInBuffer : s N , currentSeqNo : s N' , ackBuffer : n_false(N0) , bufferStart : I + 1 > if ((N == 0 and allTrue(AckL)) or (N < N0 and N > 0)) and not B .

        crl [load_dummy_word] : 
            < O : Sender | msgsToSend : nil, sendBuffer : ML , numWordsInBuffer : N , currentSeqNo : N' , ackBuffer : AckL, receiver : O', sendLast : false, bufferSize : N0 , bufferStart : I > 
            => 
            < O : Sender | msgsToSend : nil, sendBuffer : ML ++ (msg (mts withSeqNo s N') from O to O' ) , numWordsInBuffer : s N , currentSeqNo : s N' , ackBuffer : n_false(N0) , bufferStart : I + 1 > if (N == 0 and allTrue(AckL)) or (N < N0 - 1 and N > 0) .

        crl [load_last_dummy_word] : 
            < O : Sender | msgsToSend : nil, sendBuffer : ML , numWordsInBuffer : N , currentSeqNo : N' , sendLast : B0 ,finishSend : B , receiver : O', bufferSize : N0 , bufferStart : I > 
            => 
            < O : Sender | msgsToSend : nil, sendBuffer : ML ++ (msg (mts withSeqNo s N') from O to O' ) , numWordsInBuffer : s N , currentSeqNo : s N' , sendLast : true , ackBuffer : n_false(N0) , bufferStart : I + 1 > if N == (N0 - 1) .
        
        crl [sendCurrentMsgs] :
            < O : Sender | sendBuffer : ML , numWordsInBuffer : N', finishSend : B , bufferSize : N0 > < O' : Channel | msgs : ML0 , count : N > 
            =>  < O : Sender | sendBuffer : Mnil , numWordsInBuffer : 0 , lastSendMsgs : ML > < O' : Channel | msgs : (ML0 ++ ML) , count : 1 + N >  if ((N' == N0) and not B) .

        crl [rcvNewAck] : 
            (msg (ack withSeqNo N) from O' to O) < O : Sender | ackBuffer : AckL , bufferStart : N0 >
        => < O : Sender | ackBuffer : assign(AckL, 0 : (N - N0) , true) > if s N > N0 .

        crl [rcvTooOldAck] : 
            (msg (ack withSeqNo N) from O' to O) < O : Sender | currentSeqNo : N' >
        =>
            < O : Sender | > if s N < N' .


        crl [resendMsgs] : 
            { < O : Sender | ackBuffer : AckL , lastSendMsgs : ML , finishSend : false, sendBuffer : Mnil > < O' : Channel | msgs : Mnil , count : s N > R | NT }
        => 
            { < O : Sender |  > < O' : Channel | msgs : unackPacket(reverse(ML),AckL), count : N + 2 > R | NT + 1 } if not allTrue(AckL) .

        crl [finishSend] : 
            < O : Sender | sendLast : true, ackBuffer : AckL , finishSend : false, lastSendMsgs : ML >
        => 
            < O : Sender | finishSend : true , lastSendMsgs : Mnil > if allTrue(AckL) .

    class Receiver | greatestSeqNoRcvd : Nat,
                    sender : Oid,
                    msgsRcvd : StringList ,
                    rcvBuffer : StringList ,
                    rcvCheck : BoolList ,
                    channel : Oid ,
                    bufferSize : Nat ,
                    bufferStart : Int ,
                    rcvEOF : Bool ,
                    EOFPos : Nat .
        

        crl [loadWordsFromBuffer] :
            < O : Receiver | rcvBuffer : SL0, msgsRcvd : SL , rcvCheck : BL , greatestSeqNoRcvd : N , bufferSize : N0, bufferStart : I0 , rcvEOF : B0, EOFPos : N1 >
        => 
            < O : Receiver | rcvBuffer : n_mts(N0) , msgsRcvd :  SL SL0 , rcvCheck : n_false(N0), greatestSeqNoRcvd : N + N0, bufferStart : I0 + N0 > if (allTrue(BL) or (B0 and lastConsecutiveTrue(BL) >= N1)).

        crl [rmEmptyString] : 
            < O : Receiver | msgsRcvd : SL S0 >
        =>
            < O : Receiver | msgsRcvd : SL > if S0 == mts .

        crl [rcvOldPacket] :
            (msg (S withSeqNo N) from O' to O) < O : Receiver | greatestSeqNoRcvd : N' >
        =>
            < O : Receiver | > msg (ack withSeqNo N') from O to O' if N <= N' .

        crl [rcvNewPacket] :
            (msg (S withSeqNo N) from O' to O) < O : Receiver | greatestSeqNoRcvd : N' , bufferStart : N0 , bufferSize : N1 , rcvCheck : BL , rcvBuffer : SL > < O2 : Channel | count : N2, msgs : ML >
        =>
            < O : Receiver | rcvBuffer : assign(SL, N - N0, S), rcvCheck : assign( BL, N - N0, true) > < O2 : Channel | count : s N2, msgs : ML ++ msg (ack withSeqNo (N0 + lastConsecutiveTrue(assign( BL, N - N0, true )))) from O to O' >   if N >= N' /\ N < N0 + N1 /\ not (S == EOF) .

        crl [rcvEOFPacket] :
            (msg (EOF withSeqNo N) from O' to O) < O : Receiver | greatestSeqNoRcvd : N' , bufferStart : N0 , bufferSize : N1 , rcvCheck : BL , rcvBuffer : SL >
        =>
            < O : Receiver | rcvBuffer : assign(SL, N - N0, EOF), rcvCheck : assign( BL, N - N0, true ), rcvEOF : true, EOFPos : N - N0 > msg (ack withSeqNo (N0 + lastConsecutiveTrue(assign( BL, N - N0, true )))) from O to O' if N >= N' /\ N < N0 + N1 .

endom